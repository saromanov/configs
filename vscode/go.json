{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Switch": {
		"prefix": "sw",
		"body": [
		  "switch $1 {",
		  "  case $2:",
		  "    $0",
		  "  default:",
		  "    // TODO: implement",
		  "}",
		]
	  },
	  "int enum": {
		"prefix": "enum-int",
		"body": [
		  "// $1 $2.",
		  "type $1 int",
		  "",
		  "// $1s available.",
		  "const (",
			"  $1$3 $1 = iota",
			"  $0",
		  ")",
		]
	  },

	  "log error": {
		"prefix": "le",
		"body": [
		  "log.WithError(err).Error(\"$1\")"
		]
	  },

	  "log with fields and error": {
		  "prefix": "lfe",
		  "body": [
			"log.WithError(err).WithFields(log.Fields{",
			"  $0",
			"})"
		  ]
	  },
	  "fmt errorf": {
		"prefix": "fmte",
		"body": [
			"fmt.Errorf(\"$1: %v\", err)"
		]
	  },
	  "fmt Sprintf": {
		"prefix": "fmts",
		"body": [
			"fmt.Sprintf(\"$1\", )"
		]
	  },
	  "log with fields": {
		"prefix": "lw",
		"body": [
		  "log.WithFields(log.Fields{",
		  "  $0",
		  "})"
		]
	  },
	  "If Error": {
		"prefix": "e",
		"body": [
		  "if err != nil {",
		  "  $0",
		  "}"
		]
	  },
	  "If Error Oneliner": {
		"prefix": "ie",
		"body": [
		  "if err := $1; err != nil {",
		  "  $0",
		  "}"
		]
	  },

	  "If Error Oneliner With Wrap": {
		"prefix": "ie",
		"body": [
		  "if err := $1; err != nil {",
		  "  $0",
		  "}"
		]
	  },
	
}